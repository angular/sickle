/**
 * @externs
 * @suppress {duplicate}
 */
// NOTE: generated by tsickle, do not edit.

/**
 * @constructor
 * @struct
 */
function MultipleConstructorsOptional() {}

/**
 * @constructor
 * @struct
 * @param {boolean} a
 */
function MultipleConstructorsTypes(a) {}

/**
 * @constructor
 * @struct
 * @param {boolean} a
 */
function MultipleConstructorsNamesAndTypes(a) {}

/**
 * @constructor
 * @struct
 * @param {number} a
 * @param {number} b
 * @param {number} c
 * @param {string=} normal
 * @param {boolean=} color
 * @param {number=} materialIndex
 */
function MultipleConstructorsComplexMatrix(a, b, c, normal, color, materialIndex) {}

/**
 * @constructor
 * @struct
 * @param {...number} a
 */
function MultipleConstructorsVariadic(a) {}

/**
 * @constructor
 * @struct
 * @param {Array<string>} points
 */
function MultipleConstructorsVariadicNames(points) {}
/** @constructor @struct */
function OverloadSimpleArgs() {}

/**
 * @param {string} a
 * @return {void}
 */
/* TODO(tsickle:#180): Method overloaded; only adding first signature. */
OverloadSimpleArgs.prototype.overloaded = function(a) {};
/** @constructor @struct */
function OverloadNameVariants() {}

/**
 * @param {string} a
 * @return {void}
 */
/* TODO(tsickle:#180): Method overloaded; only adding first signature. */
OverloadNameVariants.prototype.overloaded = function(a) {};
/** @constructor @struct */
function OverloadReturnTypesNoVoid() {}

/**
 * @param {string} a
 * @param {boolean} b
 * @return {boolean}
 */
/* TODO(tsickle:#180): Method overloaded; only adding first signature. */
OverloadReturnTypesNoVoid.prototype.overloaded = function(a, b) {};
/** @constructor @struct */
function OverloadReturnTypesWithVoid() {}

/**
 * @param {string} a
 * @return {void}
 */
/* TODO(tsickle:#180): Method overloaded; only adding first signature. */
OverloadReturnTypesWithVoid.prototype.overloaded = function(a) {};
/** @constructor @struct */
function OverloadBigMix() {}

/**
 * @param {string} a
 * @return {void}
 */
/* TODO(tsickle:#180): Method overloaded; only adding first signature. */
OverloadBigMix.prototype.overloaded = function(a) {};
