/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
/**
 * @type {string}
 * @suppress {duplicate}
 */
var globalX;
/**
 * @constructor
 * @struct
 * @suppress {duplicate}
 */
function GlobalClass() {}
/**
 * @const
 * @suppress {duplicate}
 */
var globalNamespace = {};
/**
 * @type {string}
 * @suppress {duplicate}
 */
globalNamespace.Y;
/**
 * @constructor
 * @struct
 * @suppress {duplicate}
 */
globalNamespace.GlobalNamespaced = function() {};
/**
 * @type {string}
 * @suppress {duplicate}
 */
var exported;
/**
 * @const
 * @suppress {duplicate}
 */
var DeclareTestModule = {};
/**
 * @const
 * @suppress {duplicate}
 */
DeclareTestModule.inner = {};
/**
 * @type {boolean}
 * @suppress {duplicate}
 */
DeclareTestModule.inner.someBool;
/**
 * @record
 * @struct
 * @suppress {duplicate}
 */
DeclareTestModule.Foo = function() {};
 /** @type {string} */
DeclareTestModule.Foo.prototype.field;

/**
 * @param {string} a
 * @return {number}
 */
DeclareTestModule.Foo.prototype.method = function(a) {};

/**
 * @constructor
 * @struct
 * @suppress {duplicate}
 * @param {number} a
 */
DeclareTestModule.Clazz = function(a) {};
 /** @type {number} */
DeclareTestModule.Clazz.field;

/**
 * Comment
 * @param {string} a
 * @return {number}
 */
DeclareTestModule.Clazz.prototype.method = function(a) {};

/**
 * @param {string} a
 * @return {number}
 */
DeclareTestModule.Clazz.staticMethod = function(a) {};
/**
 * @constructor
 * @struct
 * @suppress {duplicate}
 */
DeclareTestModule.Example = function() {};

/**
 * @return {number}
 */
DeclareTestModule.Example.methodA = function() {};

/**
 * @return {string}
 */
DeclareTestModule.Example.prototype.methodA = function() {};
/**
 * @record
 * @struct
 * @suppress {duplicate}
 */
DeclareTestModule.NotYetHandled = function() {};

/* TODO: IndexSignature: DeclareTestModule */
/**
 * @const
 * @suppress {duplicate}
 */
DeclareTestModule.Enumeration = {};
/**
 * @const {number}
 * @suppress {duplicate}
 */
DeclareTestModule.Enumeration.Value1;
/**
 * @const {number}
 * @suppress {duplicate}
 */
DeclareTestModule.Enumeration.Value3;
/**
 * @const
 * @suppress {duplicate}
 */
DeclareTestModule.StringEnum = {};
/**
 * @const {number}
 * @suppress {duplicate}
 */
DeclareTestModule.StringEnum.foo;

/* TODO: StringLiteral: '.tricky.invalid name' */
/**
 * @typedef {(string|number)}
 * @suppress {duplicate}
 */
DeclareTestModule.TypeAlias;
/**
 * @const
 * @suppress {duplicate}
 */
var tsickle_declare_module = {};
// Derived from: declare module "DeclareTest-QuotedModule"
/**
 * @const
 * @suppress {duplicate}
 */
tsickle_declare_module.DeclareTest_QuotedModule = {};
/**
 * @type {string}
 * @suppress {duplicate}
 */
tsickle_declare_module.DeclareTest_QuotedModule.foo;
/**
 * @type {number}
 * @suppress {duplicate}
 */
var declareGlobalVar;

/**
 * @suppress {duplicate}
 * @param {string} x
 * @return {number}
 */
function declareGlobalFunction(x) {}
/**
 * @record
 * @struct
 * @suppress {duplicate}
 */
function DeclareTestInterface() {}
 /** @type {string} */
DeclareTestInterface.prototype.foo;

/**
 * @constructor
 * @struct
 * @suppress {duplicate}
 * @param {number=} a
 */
function MultipleConstructors(a) {}

/**
 * @return {?}
 */
Object.prototype.myMethod = function() {};

/**
 * @suppress {duplicate}
 * @param {string|number} x_or_y
 * @param {string=} x
 * @return {!CodeMirror.Editor}
 */
function CodeMirror(x_or_y, x) {}
/**
 * @record
 * @struct
 * @suppress {duplicate}
 */
CodeMirror.Editor = function() {};
 /** @type {string} */
CodeMirror.Editor.prototype.name;

/**
 * @suppress {duplicate}
 * @param {string|number} url_or_status
 * @param {string|number=} url_or_status1
 * @return {void}
 */
function redirect(url_or_status, url_or_status1) {}

/**
 * @suppress {duplicate}
 * @param {number} a
 * @param {...?|string} b
 * @return {string}
 */
function TestOverload(a, b) {}
/**
 * @record
 * @struct
 * @suppress {duplicate}
 */
function BareInterface() {}
 /** @type {string} */
BareInterface.prototype.name;

/**
 * @suppress {duplicate}
 * @param {string} tsickle_arguments
 * @return {?}
 */
function usesArguments(tsickle_arguments) {}

/**
 * @suppress {duplicate}
 * @param {?} __0
 * @return {?}
 */
function destructures(__0) {}
/**
 * @const
 * @suppress {duplicate}
 */
var ChartType = {};
/**
 * @const {number}
 * @suppress {duplicate}
 */
ChartType.line;
/**
 * @const {number}
 * @suppress {duplicate}
 */
ChartType.bar;
