Index: ./test_files/enum/enum.js
===================================================================
--- ./test_files/enum/enum.js	golden
+++ ./test_files/enum/enum.js	tsickle with transformer
@@ -16,25 +16,26 @@
 // number.  Verify that the resulting TypeScript still allows you to
 // index into the enum with all the various ways allowed of enums.
 let /** @type {number} */ enumTestValue = EnumTest1.XYZ;
 let /** @type {number} */ enumTestValue2 = EnumTest1['XYZ'];
-let /** @type {string} */ enumNumIndex = EnumTest1[((null))];
-let /** @type {number} */ enumStrIndex = EnumTest1[((null))];
+let /** @type {string} */ enumNumIndex = EnumTest1[/** @type {number} */ ((null))];
+let /** @type {number} */ enumStrIndex = EnumTest1[/** @type {string} */ ((null))];
 /**
  * @param {number} val
  * @return {void}
  */
 function enumTestFunction(val) { }
 enumTestFunction(enumTestValue);
 let /** @type {number} */ enumTestLookup = EnumTest1["XYZ"];
 let /** @type {?} */ enumTestLookup2 = EnumTest1["xyz".toUpperCase()];
-exports.EnumTest2 = {};
+let EnumTest2 = {};
+exports.EnumTest2 = EnumTest2;
 /** @type {number} */
-exports.EnumTest2.XYZ = 0;
+EnumTest2.XYZ = 0;
 /** @type {number} */
-exports.EnumTest2.PI = 3.14159;
-exports.EnumTest2[exports.EnumTest2.XYZ] = "XYZ";
-exports.EnumTest2[exports.EnumTest2.PI] = "PI";
+EnumTest2.PI = 3.14159;
+EnumTest2[EnumTest2.XYZ] = "XYZ";
+EnumTest2[EnumTest2.PI] = "PI";
 let ComponentIndex = {};
 /** @type {number} */
 ComponentIndex.Scheme = 1;
 /** @type {number} */
